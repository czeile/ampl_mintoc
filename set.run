#
# This file is part of ampl_mintoc.
#
# Copyright 2021, Sebastian Sager, Manuel Tetschke, Clemens Zeile
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree. 
#
# ampl_mintoc is free software: you can redistribute it and/or modify
# it under the terms of the BSD-style License
#
# ampl_mintoc is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#


#############
### Integrator
if (mode!="Init" and opttype!="MILP") then {
	if      (integrator=="implicitEuler") then { printf "IMPLICIT EULER ***\n\n"; let ntperel := 1; }
	else if (integrator=="explicitEuler") then { printf "EXPLICIT EULER ***\n\n"; let ntperel := 1; } 
	else if (integrator=="radau3") then { 
	# Compare Biegler "Nonlinear Programming" page 290
		printf "RADAU COLLOCATION 3 ***\n\n"; 
		let ntperel := 3; 
		let colloc[1,1] :=  0.19681547722366;
		let colloc[1,2] :=  0.39442431473909;
		let colloc[1,3] :=  0.37640306270047;
		let colloc[2,1] := -0.06553542585020;
		let colloc[2,2] :=  0.29207341166523;
		let colloc[2,3] :=  0.51248582618842;
		let colloc[3,1] :=  0.02377097434822;  
		let colloc[3,2] := -0.04154875212600;  
		let colloc[3,3] :=  0.11111111111111;
	} 
}

#############
### Optimization solver

if (opttype=="NLP") then {
	if      (nlpsolver=="knitro") then { option solver knitro; } 
	else if (nlpsolver=="minos") then { option solver minos; } 
	else if (nlpsolver=="snopt") then { option solver snopt; } 
	else if (nlpsolver=="conopt") then { option solver conopt; } 
	else { option solver ipopt; option ipopt_options 'print_level=5 halt_on_ampl_error yes max_iter=10000 max_cpu_time=3600'; } # linear_solver=ma77'; }
# linear_solver=ma27 min_refinement_steps=0 max_refinement_steps=0
#	else { option solver ipopt; option ipopt_options 'print_level=5 halt_on_ampl_error yes max_iter=500 max_cpu_time=60'; }
	option relax_integrality 1;
}
else if (opttype=="MILP") then {
	if      (milpsolver=="gurobi") then { option solver gurobi;   option gurobi_options 'timelim=1800'; } 
	else if (milpsolver=="express") then { option solver express; } 
	else if (milpsolver=="cbc") then { option solver cbc; } 
	else if (milpsolver=="scip") then { option solver scip; } 
	#else if (milpsolver=="cplex") then { option solver cplex; } 
	else { option solver cplex; }

	option relax_integrality 0;
}
else if (opttype=="MINLP") then {
	if      (minlpsolver=="knitro") then { option solver knitro; } 
	else if (minlpsolver=="bonmin") then {
		option solver bonmin;
		#options bonmin_options "bonmin.bb_log-level 2 bonmin.algorithm B-BB print_level 3 bonmin.time_limit 10";
                options bonmin_options "bonmin.time_limit 86400";

	} 
	else if (minlpsolver=="couenne") then { option solver couenne; } 
	else if (minlpsolver=="minotaur") then { option solver minotaur; options minotaur_options "bnb_time_limit 10"; } 
	else { option solver baron; }

	option relax_integrality 0;
}

###option substout 1;
option presolve_eps 1e-6;
option omit_zero_rows 1;
#option show_stats 1;
option display_precision 12;
option eexit 0;

