##############################
model ../mintocPre.mod;
model lotka.mod;
model ../mintocPost.mod;
data lotka.dat;
##############################

let nlpsolver := "ipopt";

##############################
let integrator := "explicitEuler";
let mode := "Simulate";
include ../solve.run;
display objective;

##############################
let integrator := "radau3";
let mode := "Relaxed";
include ../solve.run;
include ../plot1404.run;
include ../storeTrajectory.run;
include ../saveTrajectory.run;
#include ../printFrel.run;
include ../printOutput.run;


###############################
#let mode := "SURresolve";
#include ../algRound.run;
#let mode := "Simulate";
#include ../solve.run;
#let filename_ext := "SUR";
#include ../plot1404.run;
#include ../printOutput.run;

##############################
#let mode := "ResolveCIA";
let mode := "CIA";
include ../solveMILP.run;
let mode := "Simulate";
include ../solve.run;
let filename_ext := "CIA";
include ../plot1404.run;
include ../printOutput.run;


## for Scaled Postprocessing
for {o in Omega, i in IU} { let  w_post[o,i,"CIA"] := wi[o,i]; };
let post_objective["CIA"]:=objective;
#display w_post;


##############################
#let mode := "ResolveScaledCIA1";
let mode := "ScaledCIA1";
include ../solveMILP.run;
let mode := "Simulate";
include ../solve.run;
let filename_ext := "ScaledCIA1";
include ../plot1404.run;
include ../printOutput.run;


## for Scaled Postprocessing
for {o in Omega, i in IU} { let  w_post[o,i,"ScaledCIA1"] := wi[o,i]; };
let post_objective["ScaledCIA1"]:=objective;

##############################
let mode := "ScaledCIA1a";
include ../solveMILP.run;
let mode := "Simulate";
include ../solve.run;
let filename_ext := "ScaledCIA1a";
include ../plot1404.run;
include ../printOutput.run;

## for Scaled Postprocessing
for {o in Omega, i in IU} { let  w_post[o,i,"ScaledCIA1a"] := wi[o,i]; };
let post_objective["ScaledCIA1a"]:=objective;

let mode := "FindOutNoUnequalOmega";
#let mode := "EnumerationSingleModeWithLimitedControls";
include ../scaledCIAPostprocess.run;
#display  UnequalWIndex;
#display sum{i in IU} UnequalWIndex[i];
