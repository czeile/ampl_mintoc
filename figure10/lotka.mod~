# Problem specific parameters and variables
param ref{X};
param p{X};

# Problem specific functions

var f {k in X,o in 0..no,i in I} = (
	if      (k==1 && o==0) then x[1,i] - x[1,i]*x[2,i]
	else if (k==2 && o==0) then - x[2,i] + x[1,i]*x[2,i]
	else if (k==1 && o==1) then - x[1,i]*p[1]
	else if (k==2 && o==1) then - x[2,i]*p[2]
);


var lagrange{i in IC} = sum{k in X} (x[k,i] - ref[k])^2;
#var lagrange{i in IC} = max{k in X} abs(x[k,i] - ref[k]);

var re{k in RE} = (
	if      (k==1) then x[1,0] - 0.5
	else if (k==2) then x[2,0] - 0.7
);

var sw{o in Omega, i in IC diff {nt}, k in 1..nsw} = (
	if      (k==1) then x[1,i] - 0.8
	else if (k==2) then 1.4 - x[1,i]
);


#var f {k in X,o in 0..no,i in I} = (
#	if      (k==1 && o==0) then x[1,i] - x[1,i]*x[2,i]
#	else if (k==2 && o==0) then - x[2,i] + x[1,i]*x[2,i]
#	else if (k==1 && o==1) then - x[1,i]*p[1]
#	else if (k==2 && o==1) then - x[2,i]*p[2]
#);
#
#var lagrange{i in IC} = sum{k in X} (x[k,i] - ref[k])^2;
#var lagrange{i in IC} = max{k in X} abs(x[k,i] - ref[k]);
#
#var re{k in RE} = (
#	if      (k==1) then x[1,0] - 0.5
#	else if (k==2) then x[2,0] - 0.7
#);
#
#var sw{o in Omega, i in IC diff {nt}, k in 1..nsw} = (
#	if      (k==1) then x[1,i] - 0.8
#	else if (k==2) then 1.4 - x[1,i]
#);


# -----------------------------------------
# Unused modeling parts
var mayer = 0;

var ri {k in RI} = (
	if      (k==1) then x[1,0]
);

var xa {k in XA, i in I} = (
	if      (k==1) then x[1,i]
);

var con {k in C, i in IC} = (
	if      (k==1) then x[1,i]
);

var vcon {k in VC, o in 0..no, i in IC} = (
	if      (k==1) then x[1,i]
);

