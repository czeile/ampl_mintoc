#Vorher Auskommentieren: nt und ntperu in mathopt.mod und nt und ntperu in .dat-file (hier lotka.dat).

##############################
model ../mathopt.mod;
model lotka.mod;
include ../defProblems.run;

include ../setDefaults.run;
data lotka.dat;
##############################
let nlpsolver := "ipopt";
let nlpsolver := "knitro";
let integrator := "explicitEuler";


##############################
include ../algSimulate.run;
include ../algRelaxed.run;
printf "\\num\\def\\objRelaxed%i{%.5g}\n", runiter, objective >> tex/includeSim.tex;
##############################

##############################
printf "\n\n";
include ../algScaledCIA.run;
include ../algSimulate.run;
printf "\\num\\def\\objScaledCIA%i{%.5g}\n\\num\\def\\ciaeta%i{%.5g}\n", runiter, objective,  runiter, eta >> tex/includeSim.tex;
##############################

### Store objective
param ScaleCiaOb;
let ScaleCiaOb :=objective;
##############################


##############################
printf "\n\n";
for {o in Omega, i in IU} { let w[o,i*ntperu] := alpha[o,i]; }
include ../algScaledSUR.run;
include ../algSimulate.run;
printf "\\num\\def\\objSURsc%i{%.5g}\n", runiter, objective >> tex/includeSim.tex;
##############################


##############################
printf "\n\n";
for {o in Omega, i in IU} { let w[o,i*ntperu] := alpha[o,i]; }
include ../algSURScaledMin.run;
include ../algSimulate.run;
printf "\\num\\def\\objSURscmin%i{%.5g}\n", runiter, objective >> tex/includeSim.tex;
##############################

### Store objective
param ScaleSurOb;
let ScaleSurOb :=objective;
##############################

##############################
printf "\n\n";
for {o in Omega, i in IU} { let w[o,i*ntperu] := alpha[o,i]; }
include ../algCIA.run;
include ../algSimulate.run;
printf "\\num\\def\\objCIA%i{%.5g}\n", runiter, objective >> tex/includeSim.tex;

##############################




##############################
printf "\n\n";
for {o in Omega, i in IU} { let w[o,i*ntperu] := alpha[o,i]; }
include ../algSUR.run;
include ../algSimulate.run;
printf "\\num\\def\\objSUR%i{%.5g}\n", runiter, objective  >> tex/includeSim.tex;

### Compute deviation
param devi;
let devi := (objective-ScaleCiaOb)*100/objective;
printf "\\num\\def\\devi%i{%.5g}\n", runiter, devi  >> tex/includeSim.tex;

param devii;
let devii := (objective-ScaleSurOb)*100/objective;
printf "\\num\\def\\devii%i{%.5g}\n", runiter, devii  >> tex/includeSim.tex;

##############################

##############################
#printf "\n\n";
#include ../algMINLP.run;
#include ../algSimulate.run;
##############################

