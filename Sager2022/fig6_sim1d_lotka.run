##############################
param myfact;
param myfile {0..5} symbolic;

model ../mintocPre.mod;
model lotka.mod;
model ../mintocPost.mod;
data lotka.dat;

##############################

let nlpsolver := "ipopt";

let myfile[5] := "out/lotkasto1d_3.txt";
let myfile[4] := "out/lotkasto1d_16.txt";
let myfile[3] := "out/lotkasto1d_8.txt";
let myfile[2] := "out/lotkasto1d_4.txt";
let myfile[1] := "out/lotkasto1d_2.txt";
let myfile[0] := "out/lotkasto1d_1.txt";

##############################
#let nt := 12000;
let nt := 48000;
let integrator := "explicitEuler";

let mode := "SimulateSTO";
for {it in 0..4} {
	let myfact := 2^it;
#let myfact := 3;
	let ntperu := nt / myfact;

	printf "\n" > (myfile[it]);
	for {w1 in 0..1 by 0.01} {
		let {i in IU} wi[1,i] := w1;
		include ../solve.run;
		printf "%lg %g\n", w1, objective >> (myfile[it]);
	}
}

# Hack, repeating for special case myfact=3
let ntperu := nt / 3;
printf "\n" > (myfile[5]);
for {w1 in 0..1 by 0.01} {
	let {i in IU} wi[1,i] := w1;
	include ../solve.run;
	printf "%lg %g\n", w1, objective >> (myfile[5]);
}

##############################
# nt needs to be twice as high for STO to get the same result for w=0 and w=1
let ntperu := nt;
let mode := "Simulate";
printf "\n" > out/lotkapoc1d.txt;
for {w1 in 0..1 by 0.01} {
	let {i in IU} wi[1,i] := w1;
	include ../solve.run;
	printf "%lg %g\n", w1, objective >> out/lotkapoc1d.txt;
}

